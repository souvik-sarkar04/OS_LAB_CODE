QUESTION 1 

// C program to demonstrate
// FCFS Disk Scheduling algorithm with user input
#include <stdio.h>
#include <math.h>

/// Idea is to take absolute difference of Read/Write arm and 1st cylinder position. Then consecutive difference of cylinder positions are added up
/// It is achieved by passing head(read/write arm) to thefunction which in the 1st iteration calculates head - arr[0], then in each iteration, head 
/// is updated to current track(arr[i]). So, in further iterations, consecutive cylinder positions' difference is added up
void FCFS(int arr[], int size, int head)
{
    int seek_count = 0;
    int cur_track, distance;

    for (int i = 0; i < size; i++)
    {
        cur_track = arr[i];

        // calculate absolute distance
        distance = fabs(head - cur_track);

        // increase the total seek count
        seek_count += distance;

        // accessed track is now new head
        head = cur_track;
    }

    printf("Total number of seek operations: %d\n", seek_count);

    // Seek sequence would be the same
    // as request array sequence
    printf("Seek Sequence is:\n");

    for (int i = 0; i < size; i++) {
        printf("%d\n", arr[i]);
    }
}

// Driver code
int main()
{
    int size;
    printf("Enter the number of requests: ");
    scanf("%d", &size);

    int arr[size];

    printf("Enter the request array:\n");
    for (int i = 0; i < size; i++) {
        scanf("%d", &arr[i]);
    }

    int head;
    printf("Enter the initial head position: ");
    scanf("%d", &head);

    FCFS(arr, size, head);

    return 0;
}
/*
Input and Output : 
Enter the number of requests: 8
Enter the request array:
176 79 34 60 92 11 41 114
Enter the initial head position: 50

Total number of seek operations: 510
Seek Sequence is:
176
79
34
60
92
11
41
114

*/


/*
Some terms: 
Sure! Here’s a **clear and simple definition** of each term related to disks (especially Hard Disk Drives, HDDs):

---

### 1. **Track**
- A **track** is a **circular path** on the surface of a disk where data is magnetically recorded and read.
- Each platter surface has **many concentric tracks** (like circles inside a circle).

👉 **Analogy**: Think of tracks like the grooves on a vinyl record.

---

### 2. **Sector**
- A **sector** is a **smallest physical storage unit** on a track.
- A track is divided into **sectors**, and each sector typically holds **512 bytes or 4096 bytes** of data.
- Sectors are **like slices of a pizza** (track is the pizza, sectors are the slices).

---

### 3. **Cylinder**
- A **cylinder** is a **collection of tracks lined up vertically across all platters**.
- Tracks at the **same radius** on different platters (top, bottom) form a cylinder.
  
👉 Moving the disk head **to a different cylinder** means moving all heads together to tracks at a different radius.

---

### 4. **Platter**
- A **platter** is a **circular disk** inside a hard drive where data is actually stored magnetically.
- An HDD usually has **multiple platters** stacked vertically, separated by some space.
- Each platter has two surfaces (top and bottom) for storing data.

---

### 5. **Rotation**
- **Rotation** refers to how the platters **spin (rotate)** at high speeds, so that the read/write head can access data.
- The speed is measured in **Revolutions Per Minute (RPM)** — common speeds are 5400 RPM, 7200 RPM, or even higher.

👉 Faster rotation = quicker data access.

---

### 6. **Spindle**
- A **spindle** is the **central rod** that **holds and rotates all the platters together**.
- A motor spins the spindle, which causes all platters to rotate **at the same speed**.

---

### 7. **Read/Write Head**
- The **read/write head** is a tiny electromagnetic sensor that **reads data from** and **writes data onto** the disk surface.
- There is **one head for each surface** (top or bottom) of each platter.

👉 It floats extremely close (micrometers) over the platter without touching it.

---

### 8. **Arm**
- The **arm** (or actuator arm) **moves the read/write head** across the platters to the right track.
- It **swings in and out** like a windshield wiper to position the head over the correct track.

👉 All arms usually move **together** in modern HDDs.
*/

QUESTION 2

#include <stdio.h>
#include <stdlib.h>

/// Function: Calculates absolute difference between head and every request
void calculatedifference(int request[], int head, int diff[][2], int n)
{
/// diff[i][0] = distance of request i from head.
/// diff[i][1] = whether request i is already visited (0 = not visited, 1 = visited).
    for (int i = 0; i < n; i++)
    {
        diff[i][0] = abs(head - request[i]);
    }
}

/// Find unaccessed(!diff[i][1]) track which is at minimum distance(minimum > diff[i][0]) from head
int findMIN(int diff[][2], int n)
{
    int index = -1;
    int minimum = 1000000000; // effectively infinity

    for (int i = 0; i < n; i++)
    {
        if (!diff[i][1] && minimum > diff[i][0])
        {
            minimum = diff[i][0];
            index = i;
        }
    }
    return index;
}

void shortestSeekTimeFirst(int request[], int head, int n)
{
    if (n == 0)
    {
        return;
    }
    
    int diff[n][2]; // 2D array: [0] = distance, [1] = visited or not
    for (int i = 0; i < n; i++)
    {
        diff[i][0] = 0;
        diff[i][1] = 0;
    }
    
    /// seekcount: Total head movement (total seek distance).
    ///seeksequence[]: To store the sequence in which requests are serviced.
    int seekcount = 0;
    int seeksequence[n + 1];

    for (int i = 0; i < n; i++)
    {
        seeksequence[i] = head; /// Store current head in seek sequence.
        calculatedifference(request, head, diff, n); /// Calculate distances of all UNVISITED requests from head.
        int index = findMIN(diff, n); /// Find the closest request
        diff[index][1] = 1; /// Mark it as visited 

        seekcount += diff[index][0]; /// Add its distance to seekcount.

        head = request[index]; /// vMove head to that request.
    }
    seeksequence[n] = head;

    printf("Total number of seek operations = %d\n", seekcount);
    printf("Seek sequence is : \n");

    for (int i = 0; i <= n; i++)
    {
        printf("%d\n", seeksequence[i]);
    }
}

int main()
{
    int n, head;

    printf("Enter the number of requests: ");
    scanf("%d", &n);

    int request[n];

    printf("Enter the request sequence:\n");
    for (int i = 0; i < n; i++)
    {
        scanf("%d", &request[i]);
    }

    printf("Enter the initial head position: ");
    scanf("%d", &head);

    shortestSeekTimeFirst(request, head, n);

    return 0;
}

/*
Enter the number of requests: 8
Enter the request sequence:
176 79 34 60 92 11 41 114
Enter the initial head position: 50
Total number of seek operations = 204
Seek sequence is :
50
41
34
11
60
79
92
114
176
*/


QUESTION 3

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX 1000 // maximum number of requests

int size; /// stores how many disk requests the user inputs
int disk_size; /// maximum cylinder number (ex: 0 to 199 if disk_size = 200)

/// Bubble sort
void sort(int arr[], int n)
{
    int temp;
    for (int i = 0; i < n-1; i++)
    {
        for (int j = 0; j < n-i-1; j++)
        {
            if (arr[j] > arr[j+1])
            {
                temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }
        }
    }
}

void SCAN(int arr[], int head, char direction[])
{
    int seek_count = 0;
    int distance, cur_track;
    int left[MAX], right[MAX]; /// Arrays to store requests left and right of the current head.
    int seek_sequence[MAX];
    int left_size = 0, right_size = 0, seek_sequence_size = 0;

    /// Appending end values which have to be visited before reversing direction
    if (strcmp(direction, "left") == 0) /// If moving left, we must first move to track 0
        left[left_size++] = 0;
    else if (strcmp(direction, "right") == 0) /// If moving right, we must first move to last track (disk_size - 1)
        right[right_size++] = disk_size - 1;

    for (int i = 0; i < size; i++) 
    {
        if (arr[i] < head)
            left[left_size++] = arr[i]; /// If request is smaller than head, put into left[]
        if (arr[i] > head)
            right[right_size++] = arr[i]; /// If request is greater than head, put into right[]
    }

    /// Sorting left and right arrays
    sort(left, left_size);
    sort(right, right_size);

    /// run the loop two times one by one scanning left and right
    int run = 2;
    while (run--) 
    {
        if (strcmp(direction, "left") == 0) 
        {
            /// If moving left: Start from highest value in left array and move down toward 0.
            for (int i = left_size - 1; i >= 0; i--) 
            {
                cur_track = left[i];
                seek_sequence[seek_sequence_size++] = cur_track; /// Add it to seek sequence.

                distance = abs(head - cur_track); /// Calculate distance moved
                seek_count += distance;
                head = cur_track; /// Move head to the current track
            }
            strcpy(direction, "right"); /// reverse the direction for next run
        }
        else if (strcmp(direction, "right") == 0) 
        {
            for (int i = 0; i < right_size; i++) 
            {
                cur_track = right[i];
                seek_sequence[seek_sequence_size++] = cur_track;  /// Add it to seek sequence.

                distance = abs(head - cur_track); /// Calculate distance moved
                seek_count += distance;
                head = cur_track;  /// Move head to the current track
            }
            strcpy(direction, "left"); /// reverse the direction for next run
        }
    }

    printf("Total number of seek operations = %d\n", seek_count);
    printf("Seek Sequence is:\n");

    for (int i = 0; i < seek_sequence_size; i++) 
    {
        printf("%d\n", seek_sequence[i]);
    }
}

int main()
{
    printf("Enter the number of requests: ");
    scanf("%d", &size);

    int arr[MAX];
    printf("Enter the request sequence:\n");
    for (int i = 0; i < size; i++) 
    {
        scanf("%d", &arr[i]);
    }

    int head;
    printf("Enter the initial head position: ");
    scanf("%d", &head);

    printf("Enter the disk size: ");
    scanf("%d", &disk_size);

    char direction[10];
    printf("Enter the initial direction (left or right): ");
    scanf("%s", direction);

    SCAN(arr, head, direction);

    return 0;
}

/*
Input/Output: 
Enter the number of requests: 8
Enter the request sequence:
176 79 34 60 92 11 41 114
Enter the initial head position: 50
Enter the disk size: 200
Enter the initial direction (left or right): left
Total number of seek operations = 226
Seek Sequence is:
41
34
11
0
60
79
92
114
176
*/

EXTRA :
QUESTION 4 -  CSCAN

/*
C-SCAN moves the head from one end servicing all the requests to the other end. However, as soon as the head reaches the other end, it immediately returns to the beginning of the disk without servicing any requests on the return trip (see chart below) and starts servicing again once reaches the beginning. This is also known as the “Circular Elevator Algorithm” as it essentially treats the cylinders as a circular list that wraps around from the final cylinder to the first one.
*/

#include <stdio.h>
#include <stdlib.h>

#define MAX 100

void sort(int arr[], int n) {
    /// Simple bubble sort
    for (int i = 0; i < n - 1; i++)
        for (int j = 0; j < n - i - 1; j++)
            if (arr[j] > arr[j + 1]) {
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
}

void CSCAN(int arr[], int size, int head, int disk_size) {
    int seek_count = 0;
    int distance, cur_track;
    int left[MAX], right[MAX];
    int left_size = 0, right_size = 0;
    int seek_sequence[MAX];
    int seq_index = 0;

    /// Separate into left and right of head - SIMILAR TO SCAN
    for (int i = 0; i < size; i++) {
        if (arr[i] < head)
            left[left_size++] = arr[i];
        else
            right[right_size++] = arr[i];
    }

    /// Add start and end points - SIMILAR TO SCAN
    left[left_size++] = 0;
    right[right_size++] = disk_size - 1;

    /// Sort the lists - SIMILAR TO SCAN
    sort(left, left_size);
    sort(right, right_size);

    /// Step 1 : Service the right side of head
    for (int i = 0; i < right_size; i++) {
        cur_track = right[i];
        seek_sequence[seq_index++] = cur_track; /// Update the seek sequence

        distance = abs(cur_track - head); /// take consecutive difference of tracks
        seek_count += distance;
        head = cur_track; /// update the head to current track
    }

    /// Step 2 :  Jump to beginning
    head = 0;
    seek_count += disk_size - 1;

    /// Step 3:  Service the left side
    for (int i = 0; i < left_size; i++) {
        cur_track = left[i];
        seek_sequence[seq_index++] = cur_track; /// Update the seek sequence

        distance = abs(cur_track - head); /// take consecutive difference of tracks
        seek_count += distance;
        head = cur_track; /// update the head to current track
    }

    // Output results
    printf("\nTotal number of seek operations = %d\n", seek_count);
    printf("Seek Sequence is:\n");
    for (int i = 0; i < seq_index; i++) {
        printf("%d\n", seek_sequence[i]);
    }
}

int main() {
    int arr[MAX], size, head, disk_size;

    printf("Enter number of disk requests: ");
    scanf("%d", &size);

    printf("Enter disk request sequence:\n");
    for (int i = 0; i < size; i++) {
        scanf("%d", &arr[i]);
    }
    printf("Enter initial head position: ");
    scanf("%d", &head);
    printf("Enter total disk size: ");
    scanf("%d", &disk_size);
    CSCAN(arr, size, head, disk_size);
return 0;
}


/*
Input/Output : 
Enter number of disk requests: 8
Enter disk request sequence:
176 79 34 60 92 11 41 114
Enter initial head position: 50
Enter total disk size: 200

Total number of seek operations = 389
Seek Sequence is:
60
79
92
114
176
199
0
11
34
41

 */

QUESTION 5 - LOOK
/*
The LOOK algorithm operates by scanning the disk in a specific direction, but instead of going all the way to the end of the disk before reversing direction like the SCAN algorithm, it reverses direction as soon as it reaches the last request in the current direction.
*/
// ONLY MAJOR DIFFERENCE from SCAN is left array does not have 0 and right array does not have last track in the beginning. LOK algo will only go till the EXTREME TRACK on both sides.
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX 100

void sort(int arr[], int n) {
    int temp;
    for (int i = 0; i < n-1; i++)
        for (int j = i+1; j < n; j++)
            if (arr[i] > arr[j]) {
                temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
}

void LOOK(int arr[], int size, int head, char direction[]) {
    int seek_count = 0;
    int distance, cur_track;
    int left[MAX], right[MAX];
    int left_size = 0, right_size = 0;
    int seek_sequence[MAX];
    int seq_index = 0;

    // Separate requests into left and right of head
    for (int i = 0; i < size; i++) {
        if (arr[i] < head)
            left[left_size++] = arr[i];
        else if (arr[i] > head)
            right[right_size++] = arr[i];
    }

    sort(left, left_size);
    sort(right, right_size);

    int run = 2;
    while (run--) {
        if (strcmp(direction, "left") == 0) {
            for (int i = left_size - 1; i >= 0; i--) {
                cur_track = left[i];
                seek_sequence[seq_index++] = cur_track;
                distance = abs(cur_track - head);
                seek_count += distance;
                head = cur_track;
            }
            strcpy(direction, "right");
        } else if (strcmp(direction, "right") == 0) {
            for (int i = 0; i < right_size; i++) {
                cur_track = right[i];
                seek_sequence[seq_index++] = cur_track;
                distance = abs(cur_track - head);
                seek_count += distance;
                head = cur_track;
            }
            strcpy(direction, "left");
        }
    }

    printf("Total number of seek operations = %d\n", seek_count);
    printf("Seek Sequence is:\n");
    for (int i = 0; i < seq_index; i++) {
        printf("%d\n", seek_sequence[i]);
    }
}

int main() {
    int arr[MAX], size, head;
    char direction[10];

    printf("Enter number of disk requests: ");
    scanf("%d", &size);

    printf("Enter disk request sequence:\n");
    for (int i = 0; i < size; i++)
        scanf("%d", &arr[i]);

    printf("Enter initial head position: ");
    scanf("%d", &head);

    printf("Enter direction (left or right): ");
    scanf("%s", direction);

    printf("\nInitial position of head: %d\n", head);
    LOOK(arr, size, head, direction);

    return 0;
}

/*
Enter number of disk requests: 8
Enter disk request sequence:
176 79 34 60 92 11 41 114
Enter initial head position: 50
Enter direction (left or right): right

Initial position of head: 50
Total number of seek operations = 291
Seek Sequence is:
60
79
92
114
176
41
34
11


*/
