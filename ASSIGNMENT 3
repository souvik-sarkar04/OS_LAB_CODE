QUESTION 1

#include <stdio.h>
#include <stdlib.h> /// General utilities like exit().
#include <sys/types.h> /// Defines data types like pid_t.
#include <sys/wait.h> /// Needed for wait() and macros like WIFEXITED().
#include <unistd.h> /// Contains fork(), getpid(), etc.
 
int main() {
    pid_t pid; /// Will store the return value of fork() to differentiate parent and child.
    int status; /// Used by wait() to store the exit status of the child process.

    pid = fork(); /// Create child process
    
    //! EDGE CASES in fork()
    if (pid < 0) {
        perror("Fork failed");
        exit(1);
    }

/// This block runs in the child process.
/// getpid() gives the childâ€™s own PID.
/// exit(42) ends the child and sets the exit status to 42 (just a custom number here).
    if (pid == 0) {
        // Child process
        printf("Child process (PID: %d) is running...\n", getpid());
        exit(42); // Exit with status 42
    }
    
    else {
        /// Parent process
        printf("Parent process waiting for child to terminate...\n");

        pid_t child_pid = wait(&status); /// Wait for child

        if (WIFEXITED(status)) {
            printf("Child (PID: %d) terminated normally.\n", child_pid);
            printf("Exit status: Decimal = %d, Hex = 0x%X\n", WEXITSTATUS(status), WEXITSTATUS(status));
        } else if (WIFSIGNALED(status)) {
            printf("Child (PID: %d) terminated by signal.\n", child_pid);
            printf("Signal number: Decimal = %d, Hex = 0x%X\n", WTERMSIG(status), WTERMSIG(status)); /// WTERMSIG(status) extracts the signal number (e.g., 9 for SIGKILL).
        } else {
            printf("Child (PID: %d) terminated abnormally.\n", child_pid);
        }
    }

    return 0;
}



QUESTION 2

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main() {
    int x = 1000;  // Initial value before fork
    pid_t pid;

    printf("Before fork: x = %d (PID: %d)\n", x, getpid());

    pid = fork();  // Create child process

    if (pid < 0) {
        perror("fork failed");
        exit(1);
    }

    if (pid == 0) {
        // Child process
        printf("Child Process: x = %d (PID: %d)\n", x, getpid());
        x = 2000;
        printf("Child Process: x changed to %d\n", x);
    } else {
        // Parent process
        printf("Parent Process: x = %d (PID: %d)\n", x, getpid());
        x = 3000;
        printf("Parent Process: x changed to %d\n", x);
    }

    return 0;
}

/*
Before fork: x = 1000 (PID: 12345)
Parent Process: x = 1000 (PID: 12345)
Parent Process: x changed to 3000
Child Process: x = 1000 (PID: 12346)
Child Process: x changed to 2000
*/


/*
Observations and Theory
What value is the variable in the child process?

After fork(), both parent and child get a copy of the original variable x = 1000.

What happens when both parent and child change x?

Each process has its own copy of the variable in separate memory spaces.

Changes in one process do not affect the other.

Why?

fork() uses Copy-on-Write (COW):

The OS initially shares the same memory pages between the parent and child.

As soon as either process writes to a variable, a copy is made so they don't interfere.

Conclusion:

Global and local variables are duplicated during fork().

Each process has independent memory after fork().
*/


QUESTION 3

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <string.h>

int main() {
    int fd;
    pid_t pid;

    /// Open a file with write-only access, create if it doesn't exist, truncate to overwrite
    fd = open("output.txt", O_WRONLY | O_CREAT | O_TRUNC, 0644);
    if (fd < 0) {
        perror("open");
        exit(1);
    }

    /// Create a new process
    pid = fork();

    if (pid < 0) {
        perror("fork");
        exit(1);
    } else if (pid == 0) {
        /// Child process
        const char *child_msg = "This is the child process.\n";
        for (int i = 0; i < 5; i++) {
            write(fd, child_msg, strlen(child_msg));
            sleep(1); /// Add delay to simulate concurrency
        }
    } else {
        /// Parent process
        const char *parent_msg = "This is the parent process.\n";
        for (int i = 0; i < 5; i++) {
            write(fd, parent_msg, strlen(parent_msg));
            sleep(1); /// Add delay to simulate concurrency
        }

        /// Wait for child to finish
        wait(NULL);
    }

    close(fd);
    return 0;
}

/*
Theoretical Explanation
Q: Can both the child and parent access the file descriptor returned by open()?
âœ… Yes.
When a process calls fork(), the child process receives a copy of the parentâ€™s file descriptors. They both share the same underlying open file description (same file offset, same flags), even though they have separate file descriptor numbers in their respective descriptor tables.

Q: What happens when both write to the file concurrently?
âœ… Observations:

Shared file offset:
Both parent and child share the same file offset since they reference the same open file description. This means their writes may interleave or overwrite each other unless carefully synchronized.

Race conditions:
Without synchronization, the output can be unpredictable. Part of a message from the parent may be followed or preceded by part of a message from the child, causing interleaving.

Atomicity:
If each write() call is smaller than the PIPE_BUF (usually 4096 bytes on Linux), POSIX guarantees that writes to a file descriptor are atomic. So in this example, each full message from parent or child will be written as a whole, without being split, assuming no buffering issues.

ðŸ“„ Sample Output (content of output.txt may look like):

This is the parent process.
This is the child process.
This is the parent process.
This is the child process.
...
However, the exact order may vary every run due to scheduling and lack of synchronization.
*/


QUESTION 4

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

void collatz_sequence(int n) {
    while (n != 1) {
        printf("%d, ", n);
        if (n % 2 == 0)
            n = n / 2;
        else
            n = 3 * n + 1;
    }
    printf("1\n");  // End of sequence
}

int main(int argc, char *argv[]) {
    if (argc != 2) { ///argc must be 2: the program name (./collatz) and one argument (8).
        fprintf(stderr, "Usage: %s <positive-integer>\n", argv[0]); 
        exit(EXIT_FAILURE);
    }

    int n = atoi(argv[1]); /// command line argument converted to integer
    if (n <= 0) {
        fprintf(stderr, "Error: Number must be a positive integer.\n");
        exit(EXIT_FAILURE);
    }

    pid_t pid = fork();

    if (pid < 0) {
        perror("fork failed");
        exit(EXIT_FAILURE);
    } else if (pid == 0) {
        // Child process
        printf("Child process: Collatz sequence for %d is:\n", n);
        collatz_sequence(n); /// It prints the sequence: repeatedly divides by 2 if even, or does 3n + 1 if odd, until it reaches 1.
        exit(EXIT_SUCCESS);
    } else {
        // Parent process
        wait(NULL);  // Wait for child to finish
        printf("Parent process: Child has finished computing the Collatz sequence.\n");
    }

    return 0;
}

/// Run using : gcc collatz.c
/// ./collatz 8 (pass parameter 8 as command line argument)
