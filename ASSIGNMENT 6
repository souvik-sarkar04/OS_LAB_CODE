QUESTION 1

FCFS

#include <stdio.h>
#include <stdlib.h>
struct Process {
    int id, bt, at, ct, tat, wt;
};

/// Function to take input for arrival and burst times for all processes
void input(struct Process *p, int n) {
   for (int i = 0; i < n; i++) {
       printf("\nEnter arrival time for process %d:\n", i + 1);
       scanf("%d", &p[i].at);
       printf("\nEnter burst time for process %d:\n", i + 1);
       scanf("%d", &p[i].bt);
       p[i].id = i + 1;
   }
}

/// Function to (BUBBLE) sort processes with respect to arrival times
void sort(struct Process *p, int n) {
   for (int i = 0; i < n - 1; i++) {
       for (int j = 0; j < n - i - 1; j++) {
           if (p[j].at > p[j + 1].at) {
               /// Swap burst times
               int temp = p[j].bt;
               p[j].bt = p[j + 1].bt;
               p[j + 1].bt = temp;

               /// Swap arrival times
               temp = p[j].at;
               p[j].at = p[j + 1].at;
               p[j + 1].at = temp;

               /// Swap process IDs
               temp = p[j].id;
               p[j].id = p[j + 1].id;
               p[j + 1].id = temp;
           }
       }
   }
}
/// Function to calculate waiting time, turn-around time, and completion time
void calc(struct Process *p, int n) {
   int sum = 0;
   sum = sum + p[0].at; /// Initializes sum to start from the arrival time of the first process(if it is non-zero)
   for (int i = 0; i < n; i++) {
       sum = sum + p[i].bt; /// Adds its burst time to sum, which represents current time.
       p[i].ct = sum;
       p[i].tat = p[i].ct - p[i].at; /// TAT = CT - AT
       p[i].wt = p[i].tat - p[i].bt; /// WT = TAT - BT
       if (sum < p[i + 1].at) {
        /// If the next process arrives(p[i+1].at) after the current sum (i.e., CPU is idle), add that idle time.
           int t = p[i + 1].at - sum;
           sum = sum + t;
       }
   }
}


// Function to display process details
void show(struct Process *p, int n) {
   printf("Process\tArrival\tBurst\tWaiting\tTurn Around\tCompletion\n");
   for (int i = 0; i < n; i++) {
       printf("  P[%d]\t  %d\t%d\t%d\t   %d\t\t%d\n", p[i].id, p[i].at, p[i].bt, p[i].wt, p[i].tat, p[i].ct);
   }
}


int main() {
    int n;
    printf("\nEnter the number of processes in your system:\n");
    scanf("%d", &n);
    
    /// Dynamically allocate memory for the processes array(n)
    struct Process *p = (struct Process*) malloc(n * sizeof(struct Process));
    
    // Calling the functions
    input(p, n);
    sort(p, n);
    calc(p, n);
    show(p, n);

    // Free the dynamically allocated memory
    free(p);

    return 0;
}



SJF - NON PREEMPTIVE(First check Question 2 then check this code)




#include <stdio.h>
#include <stdlib.h>

struct Process {
    int id;
    int arrivalTime;
    int burstTime;
    int remainingTime;
    int waitingTime;
    int turnaroundTime;
    int completionTime;
};

int main() {
    int n, currentTime = 0, completed = 0; /// Number of processes that have finished execution(same as QUESTION 2)
    printf("Enter number of processes: ");
    scanf("%d", &n);

    /// Dynamically allocate memory for the processes(same as QUESTION 2)
    struct Process *p = (struct Process *)malloc(n * sizeof(struct Process));

    /// Input the arrival time and burst time for each process(same as QUESTION 2)
    for (int i = 0; i < n; i++) {
        p[i].id = i + 1;
        scanf("%d %d", &p[i].arrivalTime, &p[i].burstTime);
        p[i].remainingTime = p[i].burstTime; // Set initial remaining time to burst time
    }

    /// Process the tasks until all are completed(same as QUESTION 2)
    while (completed < n) {
        int idx = -1;

        /// Find the process with the shortest burst time that has arrived
        for (int i = 0; i < n; i++) {
            // Only consider: 
            // - Arrived processes (arrivalTime <= currentTime)
            // - Processes that are not yet completed (remainingTime > 0)
            /// Among them, select the one with the smallest burst time. If burst time is same, check the one with the smaller arrival time(ONLY CHANGE)
            if (p[i].arrivalTime <= currentTime && p[i].remainingTime > 0) {
                // if (idx == -1 || 
                //     p[i].burstTime < p[idx].burstTime || 
                //     (p[i].burstTime == p[idx].burstTime && p[i].arrivalTime < p[idx].arrivalTime)) {
                //     idx = i;
                // }
                if (p[i].arrivalTime <= currentTime && p[i].remainingTime > 0) {
                    if (idx == -1 || 
                        p[i].burstTime < p[idx].burstTime || 
                        (p[i].burstTime == p[idx].burstTime && p[i].arrivalTime < p[idx].arrivalTime)) {
                        idx = i;
                    }
                }
            }
        }

        /// If we found a process, execute it(same as QUESTION 2)
        if (idx != -1) {
            p[idx].remainingTime = 0; // Process will run to completion (non-preemptive)
            currentTime += p[idx].burstTime; // Move the current time forward by the burst time
            p[idx].completionTime = currentTime; // Set completion time
            p[idx].turnaroundTime = p[idx].completionTime - p[idx].arrivalTime; // Turnaround time
            p[idx].waitingTime = p[idx].turnaroundTime - p[idx].burstTime; // Waiting time
            completed++; // One more process is completed
        } else {
            /// (same as QUESTION 2)
            // If no process is ready to execute, just increment the current time
            currentTime++;
        }
    }

    // Calculate the average waiting time and turnaround time
    double totalWT = 0, totalTAT = 0;
    for (int i = 0; i < n; i++) {
        totalWT += p[i].waitingTime;
        totalTAT += p[i].turnaroundTime;
        printf("P%d CT: %d WT: %d TAT: %d\n", p[i].id, p[i].completionTime, p[i].waitingTime, p[i].turnaroundTime);
    }

    // Print the average waiting time and turnaround time
    printf("Avg WT: %.2f Avg TAT: %.2f\n", totalWT / n, totalTAT / n);

    // Free the dynamically allocated memory
    free(p);

    return 0;
}


ROUND ROBIN 


//C++ Program for implementing
//Round Robin Algorithm
//code by sparsh_cbs
#include <stdio.h>
#include <stdbool.h>

/*
Round Robin Scheduling: Overview
Each process is given a time slice (time quantum).
After the time slice expires, the next process in the queue is given the CPU.
If a process is not completed within its time slice, it's re-added to the queue
*/


/*
 Parameters:
queue[]: Array representing the ready queue of process IDs.
timer: Current system time.
arrival[]: Array of arrival times for each process.
n: Total number of processes.
maxProccessIndex: Index of the LAST process that has been added to the queue.

*/
void queueUpdation(int queue[],int timer,int arrival[],int n, int maxProccessIndex){
    int zeroIndex;
    for(int i = 0; i < n; i++){
        if(queue[i] == 0){ /// A variable to store the first available (empty) position in the queue. -> 0 represents empty slot
            zeroIndex = i;
            break;
        }
    }   
    queue[zeroIndex] = maxProccessIndex + 1; /// Adds the next process(last process + 1) to the ready queue.
}

/// It essentially performs a left rotation of the queue by one position -> when a process COMPLETES EXECUTION or gets PREEMPTED on exhausting quantum time
void queueMaintainence(int queue[], int n){
    for(int i = 0; (i < n-1) && (queue[i+1] != 0) ; i++){
        int temp = queue[i];
        queue[i] = queue[i+1];
        queue[i+1] = temp; 
    }
}

/// This function is responsible for checking if any new process has arrived (i.e., its arrival time is less than or equal to the current time timer) and, if so, it adds the latest arrived process to the ready queue.
void checkNewArrival(int timer, int arrival[], int n, int maxProccessIndex,int queue[]){
    if(timer <= arrival[n-1]){ /// Only check for new arrivals if current time hasn't passed the last arrival time.(do not check for timer > arrival[n-1])
       bool newArrival = false;

       for(int j = (maxProccessIndex+1); j < n; j++){  ///  avoid duplicate process entering queue(j = maxProcessIndex + 1)

             if(arrival[j] <= timer){ /// Check if the j-th process has already arrived by current timer.

              if(maxProccessIndex < j){ /// If j (the current process you're scanning) is greater than maxProccessIndex, it's a new process, and we want to include it now.
               /// This check prevents duplicate addition of the same process to the queue
                 maxProccessIndex = j;
                 newArrival = true;
              }
           }
       }
       /// adds the incoming process to the ready queue
       //(if any arrives)
       if(newArrival)
          queueUpdation(queue,timer,arrival,n, maxProccessIndex);
    }
}

//Driver Code
int main(){
    int n,tq, timer = 0, maxProccessIndex = 0;
    float avgWait = 0, avgTT = 0;
    printf("\nEnter the time quanta : ");
    scanf("%d", &tq);
     printf("\nEnter the number of processes : ");
     scanf("%d", &n);
    int arrival[n], burst[n], wait[n], turn[n], queue[n], temp_burst[n];
    bool complete[n];

     printf("\nEnter the arrival time of the processes : ");
    for(int i = 0; i < n; i++)
    scanf("%d",&arrival[i]);

   printf("\nEnter the burst time of the processes : ");
    for(int i = 0; i < n; i++){
        scanf("%d",&burst[i]);
        temp_burst[i] = burst[i];
    }

    for(int i = 0; i < n; i++){    /// Initializing the queue and complete array
        complete[i] = false;
        queue[i] = 0;
    }
    while(timer < arrival[0])    /// Incrementing Timer until the first process arrives(in case AT of process 1 > 0)
        timer++; 

        ///  Add the first process (Process 1) to the queue manually to kick off the Round Robin scheduling.
    queue[0] = 1;
    
    while(true){
        bool flag = true;
        /// This loop checks whether all processes have finished. -> if any process has burst time != 0 -> its UNFINISHED -> further operations must happen
        for(int i = 0; i < n; i++){
            if(temp_burst[i] != 0){
                flag = false;
                break;
            }
        }
        /// All processes finished -> terminate Round Robin
        if(flag)
            break;

        for(int i = 0; (i < n) && (queue[i] != 0); i++){ /// As long as a valid process is present in the queue (queue[i] != 0), continue processing.
            int ctr = 0;
            while((ctr < tq) && (temp_burst[queue[0]-1] > 0)){ /// queue[0] is 1-indexed, queue[0]-1 -> 0-indexed
                /// Per unit time traversal : burst time decreased by 1, (gantt chart) timer increased by 1, ctr++
                temp_burst[queue[0]-1] -= 1; 
                timer += 1;
                ctr++;

                /// Checking and Updating the ready queue until all the processes arrive(We do it after every unit time passes)
                checkNewArrival(timer, arrival, n, maxProccessIndex, queue);
            }
            ///If a process is completed then store its exit time and mark it as completed
            if((temp_burst[queue[0]-1] == 0) && (complete[queue[0]-1] == false)){
                /// turn array currently stores the completion time
                turn[queue[0]-1] = timer;        
                complete[queue[0]-1] = true;
            }
            
              /// checks whether or not CPU is idle
            bool idle = true;
            if(queue[n-1] == 0){ /// Checks if the queue is nearly empty 
                for(int i = 0; i < n && queue[i] != 0; i++){
                    if(complete[queue[i]-1] == false){ /// Checks if all remaining processes in queue are completed.
                        idle = false;
                    }
                }
            }
            else
                idle = false;

            if(idle){
                /// If idle == true, that means no work is currently being done → increment time artificially to simulate idle CPU and continue checking for new arrivals.
                /// This is a situation when there is nothing in ready queue and we wait for future processes to arrive in it
                timer++;
                checkNewArrival(timer, arrival, n, maxProccessIndex, queue);
            }
      
            ///Maintaining the entries of processes after each premption in the ready Queue
            queueMaintainence(queue,n);
        }
    }

    /// Calculate turnaround time and burst time for each process
    for(int i = 0; i < n; i++){
        turn[i] = turn[i] - arrival[i];
        wait[i] = turn[i] - burst[i];
    }

   printf("\nProgram No.\tArrival Time\tBurst Time\tWait Time\tTurnAround Time\n");
    for(int i = 0; i < n; i++){
        printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\n", i + 1, arrival[i], burst[i], wait[i], turn[i]);

    }
    for(int i =0; i< n; i++){
        avgWait += wait[i];
        avgTT += turn[i]; 
    }
    printf("\nAverage wait time : %.2f\nAverage Turn Around Time : %.2f\n", avgWait / n, avgTT / n);

    return 0;
    
}



PRIORITY SCHEDULING


#include <stdio.h>

struct process
{
    int WT, AT, BT, TAT, PT;
};

struct process a[10];

int main()
{
    int n, temp[10], t, count = 0, short_p, i;
    float total_WT = 0, total_TAT = 0, Avg_WT, Avg_TAT;

    printf("Enter the process\n");

    scanf("%d", &n);

    printf("Input the arrival time , burst time and priority of the process\n");

    for (i = 0; i < n; i++)
    {
        scanf("%d%d%d", &a[i].AT, &a[i].BT, &a[i].PT);
        /// adding a duplicate of the burst time temporary array for future use
        temp[i] = a[i].BT;
    }

    /// initializing burst time of a process with maximum

    a[9].PT = 10000; /// This ensures a[9] (dummy) has lowest priority.

    /*
    Run the simulation in time units (t increases by 1 per iteration).
Loop continues until count == n (all processes are completed).
At each time t, assume process at index 9 (sentinel) is selected initially.
    */
    for (t = 0; count != n; t++)
    {
        short_p = 9;
        for (i = 0; i < n; i++)
        {
            /*If a process:
Has higher priority (smaller number)
Has already arrived
Still has burst time left
Then it's a better candidate to run*/
            if (a[short_p].PT > a[i].PT && a[i].AT <= t && a[i].BT > 0)
            {
                short_p = i;
            }
        }

        /// Decrease burst time by 1 unit for the selected process. This simulates 1 unit of CPU execution.
        a[short_p].BT = a[short_p].BT - 1;

        /// if condition on any process is completed
        if (a[short_p].BT == 0)
        {
            /// one process is completed so count increases by 1
            count++;

            a[short_p].WT = t + 1 - a[short_p].AT - temp[short_p]; /// WT = (TAT)(Completion Time - Arrival Time) - (Original Burst Time)(BT)

            a[short_p].TAT = t + 1 - a[short_p].AT; /// (TAT)(Completion Time - Arrival Time)

            /// total cal
            total_WT = total_WT + a[short_p].WT;

            total_TAT = total_TAT + a[short_p].TAT;
        }
    }

    Avg_WT = total_WT / n;

    Avg_TAT = total_TAT / n;

    // printing of the answer

    printf("ID\tWT\tTAT\n");

    for (i = 0; i < n; i++)
    {
        printf("%d\t%d\t%d\n", i + 1, a[i].WT, a[i].TAT);
    }

    printf("Avg waiting time is %f\n", Avg_WT);

    printf("Avg turn around time is %f\n", Avg_TAT);

    return 0;
}


QUESTION 2 - SRTF


#include <stdio.h>
#include <stdlib.h>

struct Process {
    int id;
    int arrivalTime;
    int burstTime;
    int remainingTime;
    int waitingTime;
    int turnaroundTime;
    int completionTime;
};

int main() {
    int n, currentTime = 0, 
    completed = 0; /// Number of processes that have finished execution.
    printf("Enter number of processes: ");
    scanf("%d", &n);

    /// Dynamically allocate memory for the processes
    struct Process *p = (struct Process *)malloc(n * sizeof(struct Process));

    /// Input the arrival time and burst time for each process
    for (int i = 0; i < n; i++) {
        p[i].id = i + 1;
        scanf("%d %d", &p[i].arrivalTime, &p[i].burstTime);
        p[i].remainingTime = p[i].burstTime;
    }

    /// Process the tasks until all are completed
    while (completed < n) {
        int idx = -1;

        /// Find the process with the shortest remaining time that has arrived
        for (int i = 0; i < n; i++) {

            /// Only consider: Arrived processes (arrivalTime <= currentTime) That have remaining time (remainingTime > 0)
            /// Among them, select the one with smallest remaining time. -> idx keeps the index of the currently selected process.
            if (p[i].arrivalTime <= currentTime && p[i].remainingTime > 0 &&
                (idx == -1 || p[i].remainingTime < p[idx].remainingTime)) {
                idx = i;
            }
            
        }

        /// If we found a process, execute it
        if (idx != -1) { /// Simulate execution for 1 time unit.
            p[idx].remainingTime--; /// Process remaining time decreases by 1
            currentTime++; /// Gantt chart timer increases by 1

            /// Process finished -> update all its parameters using known formulae
            if (p[idx].remainingTime == 0) {
                p[idx].completionTime = currentTime;
                p[idx].turnaroundTime = currentTime - p[idx].arrivalTime;
                p[idx].waitingTime = p[idx].turnaroundTime - p[idx].burstTime;
                completed++; /// Number of processes completed increases by 1
            }

            /// If no process is ready to execute, just increment the gantt chart timer
        } else {
            currentTime++;
        }
    }

    /// Calculate the average waiting time and turnaround time
    double totalWT = 0, totalTAT = 0;
    for (int i = 0; i < n; i++) {
        totalWT += p[i].waitingTime;
        totalTAT += p[i].turnaroundTime;
        printf("P%d CT: %d WT: %d TAT: %d\n", p[i].id, p[i].completionTime, p[i].waitingTime, p[i].turnaroundTime);
    }

    /// Print the average waiting time and turnaround time
    printf("Avg WT: %.2f Avg TAT: %.2f\n", totalWT / n, totalTAT / n);

    /// Free the dynamically allocated memory
    free(p);

    return 0;
}


QUESTION 3

#include<stdio.h>
int main()
{
	int p[20],bt[20], su[20], wt[20],tat[20],i, k, n, temp;
	float wtavg, tatavg;
	printf("Enter the number of processes:");
	scanf("%d",&n);
	for(i=0;i<n;i++)
	{
		p[i] = i;
		printf("Enter the Burst Time of Process%d:", i);
		scanf("%d",&bt[i]);
		printf("System/User Process (0/1) ? ");
		scanf("%d", &su[i]);
	}
	for(i=0;i<n;i++)
		for(k=i+1;k<n;k++)
			if(su[i] > su[k])
			{
			temp=p[i];
			p[i]=p[k];
			p[k]=temp;
			temp=bt[i];
			bt[i]=bt[k];
			bt[k]=temp;
			temp=su[i];
			su[i]=su[k];
			su[k]=temp;
			}
	wtavg = wt[0] = 0;
	tatavg = tat[0] = bt[0];
	for(i=1;i<n;i++)
	{
		wt[i] = wt[i-1] + bt[i-1];
		tat[i] = tat[i-1] + bt[i];
		wtavg = wtavg + wt[i];
		tatavg = tatavg + tat[i];
	}
	printf("\nPROCESS\t\t SYSTEM/USER PROCESS \tBURST TIME\tWAITING TIME\tTURNAROUND TIME");
	for(i=0;i<n;i++)
		printf("\n%d \t\t %d \t\t %d \t\t %d \t\t %d ",p[i],su[i],bt[i],wt[i],tat[i]);
	printf("\nAverage Waiting Time is --- %f",wtavg/n);
	printf("\nAverage Turnaround Time is --- %f",tatavg/n);
	return 0;
}


