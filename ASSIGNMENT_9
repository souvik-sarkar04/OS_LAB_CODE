QUESTION 1 
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char *argv[]) {
    // Check if the address was provided
    if (argc != 2) {
        fprintf(stderr, "Usage: %s <virtual address>\n", argv[0]);
        return 1;
    }

    // Convert input string to unsigned int
    unsigned int virtual_address = (unsigned int)atoi(argv[1]);

    // Define the page size (4KB = 2^12)
    unsigned int page_size = 4096;

    // Calculate page number and offset - standard formulae
    unsigned int page_number = virtual_address / page_size;
    unsigned int offset = virtual_address % page_size;

    // Output results
    printf("The address %u contains:\n", virtual_address);
    printf("page number = %u\n", page_number);
    printf("offset = %u\n", offset);

    return 0;
}

QUESTION 2

FIFO

#include <stdio.h>
#include <stdlib.h>

#define MAX 1000  // Maximum number of pages

// Function to check if a page is already present in the set
int isPresent(int q[], int size, int key) {
    for (int i = 0; i < size; i++) {
        if (q[i] == key)
            return 1;  // Found
    }
    return 0;  // Not found
}

// Function to find page faults using FIFO

int pageFaults(int pages[], int n, int capacity) {
    int q[capacity];  // To store the pages currently in memory
    int front = 0, rear = 0, count = 0; // For FIFO queue
    int page_faults = 0;

    for (int i = 0; i < n; i++) {
        if (count < capacity) {
            /// There is still space -> in initial iterations
            if (!isPresent(q, count, pages[i])) { /// if the new page is not present, then insert it into the REAR of queue(just like FIFO)
                q[rear] = pages[i];
                /// kind of resembles circular queue where we try to come back to the FRONT of queue to fill new elements when the last positions of the queue is full
                rear = (rear + 1) % capacity;
                count++; /// this will increase the count of number of UNIQUE pages in the current state
                page_faults++; /// if page is not present in frame beforehand -> obviously, there is a page fault
            }
        } else {
            /// Set(count of UNIQUE pages in current state) is full(= capacity) -> now if new page is PRESENT, then ok but if new page is NOT PRESENT, then replacement is necessary
            if (!isPresent(q, capacity, pages[i])) {
                /// Replace the oldest page (FIFO)(pointed by 'front') with the CURRENT PAGE(pages[i])
                q[front] = pages[i]; 
                front = (front + 1) % capacity; /// Increase front so that next element can be marked as 'Least Recently Used'
                rear = (rear + 1) % capacity; /// Increase rear so that in next iteration, if NEW PAGE HAS TO BE ADDED, it is added at the correct place
                page_faults++; /// if page is not present in frame beforehand -> obviously, there is a page fault
            }
        }
    }

    return page_faults;
}

int main() {
    int n, capacity;
    int pages[MAX];

    printf("Enter number of pages: ");
    scanf("%d", &n);

    printf("Enter the page reference string (space-separated): ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &pages[i]);
    }

    printf("Enter the capacity of the frame: ");
    scanf("%d", &capacity);

    int faults = pageFaults(pages, n, capacity);
    printf("Total Page Faults = %d\n", faults);

    return 0;
}


LRU

#include <stdio.h>
#include <limits.h>

// Function to find page faults using indexes
int pageFaults(int pages[], int n, int capacity) {
    int set[100];       /// set[] is used to store current pages in memory (simulate an unordered set).
    int indexes[1000];  /// indexes[] keeps track of last used index of every page (simulate a map from page â†’ last use time).
    int set_size = 0;   /// set_size tracks how many pages are currently in memory.
    int page_faults = 0;

    for (int i = 0; i < n; i++) { /// loop through each page that arrives
        int found = 0;
        for (int j = 0; j < set_size; j++) { /// Check if the current page (pages[i]) already exists in memory (set[]).
            if (set[j] == pages[i]) {
                found = 1;
                break;
            }
        }

        if (set_size < capacity) { /// If memory is not full yet (set_size < capacity), we have space for more pages.
            if (!found) { /// page not found -> insert new page into set and INCREASE its size, also page is ABSENT so page faults increase by 1
                set[set_size] = pages[i];
                set_size++;
                page_faults++;
            }
            indexes[pages[i]] = i; /// keep track of LAST index where current page(pages[i](value)) occurs
        } else { /// Memory is full(all frames utilised) -> Main LRU has to be applied if page is ABSENT(if page is present, then leave as it is)
            if (!found) { /// If the page is NOT already present, we need to replace the least recently used (LRU) page.
                int lru = INT_MAX, val_index = -1;

                for (int j = 0; j < set_size; j++) { /// set[] has all pages CURRENTLY in memory -> check which has LEAST last occurred index -> that is replaced
                    if (indexes[set[j]] < lru) {
                        lru = indexes[set[j]];
                        val_index = j;
                    }
                }

                /// Remove LRU page -> by updating it with the current page
                set[val_index] = pages[i];

                /// Increment page faults
                page_faults++;
            }
            indexes[pages[i]] = i;  /// keep track of LAST index where current page(pages[i](value)) occurs
        }
    }

    return page_faults;
}

int main() {
    int n, capacity;
    
    printf("Enter number of pages: ");
    scanf("%d", &n);

    int pages[n];
    printf("Enter page numbers:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &pages[i]);
    }

    printf("Enter capacity of memory frames: ");
    scanf("%d", &capacity);

    int faults = pageFaults(pages, n, capacity);
    printf("Total Page Faults: %d\n", faults);

    return 0;
}


OPTIMAL

#include <stdio.h>
#include <stdbool.h>

void optimalPage(int pg[], int pn, int fn) /// pn - total pages, fn - number of frames available in memory
{
    // Create an array for given number of
    // frames and initialize it as empty.
    int fr[fn];/// fr[] is an array that simulates page frames in memory.
    memset(fr, -1, sizeof(fr)); // set all elements of fr to -1

    // Traverse through page reference array
    // and check for miss and hit.
    int hit = 0;
    for (int i = 0; i < pn; i++) {
        /// Page found in a frame : HIT
        bool found = false;
        for (int j = 0; j < fn; j++) {
            if (fr[j] == pg[i]) {
                hit++;
                found = true;
                break;
            }
        }

        if (found)
            continue;

        /// Page not found in a frame : MISS

        /// If there is space available in frames.
        bool emptyFrame = false;
        for (int j = 0; j < fn; j++) {
            if (fr[j] == -1) {
                fr[j] = pg[i];
                emptyFrame = true;
                break;
            }
        }

        if (emptyFrame)
            continue;

        /// Find the page to be replaced.
        int farthest = -1, replaceIndex = -1;
        for (int j = 0; j < fn; j++) { /// Outer loop goes over each page currently in memory (fr[j])
            int k;
            for (k = i + 1; k < pn; k++) { /// Outer loop goes over each page currently in memory (fr[j])
                if (fr[j] == pg[k]) { ///Track the page whose next use is farthest in the future.
                    if (k > farthest) {
                        farthest = k;
                        replaceIndex = j;
                    }
                    break;
                }
            }
            if (k == pn) { /// If a page is never used again (k == pn), we immediately choose it for replacement.


                replaceIndex = j;
                break;
            }
        }
        fr[replaceIndex] = pg[i]; /// Replace the identified page with the current requested page.
    }
    // cout << "No. of hits = " << hit << endl;
    // cout << "No. of misses = " << pn - hit << endl;
}

int main() {
    int pg[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5};
    int pn = sizeof(pg) / sizeof(pg[0]);
    int fn = 4;
    optimalPage(pg, pn, fn);
    return 0;
}
//This code is contributed by snehalsalokhe
